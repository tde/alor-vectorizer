// dump.js - –ú–æ–¥—É–ª—å –¥–ª—è –¥–∞–º–ø–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket
import { AlorWS } from "./wsClient.js";
import { CONFIG } from "./config.js";
import fs from 'fs';
import path from 'path';
import writeFileAtomic from 'write-file-atomic';

// –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –≤ –±—É—Ñ–µ—Ä–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
const MAX_BUFFER_SIZE = 500;

let wsClient = null;
let isRunning = false;

// –ï–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–¥–µ–ª–∫–∏ + —Å—Ç–∞–∫–∞–Ω)
let dataBuffer1 = [];
let dataBuffer2 = [];
let dataBufferCurrent = dataBuffer1
let currentIndex = 0;

// –ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –∏–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
let isSaving = false;

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–æ–≥–æ–≤
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [YYYY-MM-DD HH:MM:SS]
 */
function getLogTimestamp() {
  const now = new Date();
  const moscowTime = new Date(now.getTime() + (3 * 60 * 60 * 1000)); // UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
  return `[${moscowTime.toISOString().slice(0, 19).replace('T', ' ')}]`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–∞—Ö (–ú–°–ö)
 * @returns {boolean} true –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã
 */
function isTradingTime() {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ (UTC+3)
  const now = new Date();
  const moscowTime = new Date(now.getTime() + (3 * 60 * 60 * 1000)); // UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
  
  const currentTimeMinutes = moscowTime.getHours() * 60 + moscowTime.getMinutes();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é
  for (const session of CONFIG.TRADING_SESSIONS) {
    if (currentTimeMinutes >= session.start && currentTimeMinutes <= session.end) {
      return true;
    }
  }
  
  return false;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞–º–ø–∞ –¥–∞–Ω–Ω—ã—Ö
 */
export async function runDump() {
  console.log('[i] –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –¥–∞–º–ø–∞ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    console.log(`${getLogTimestamp()} [i] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–º–ø–∞:`);
    console.log(`  - API URL: ${CONFIG.BASE_URL}`);
    console.log(`  - WebSocket URL: ${CONFIG.WS_URL}`);
    console.log(`  - –ë–∏—Ä–∂–∞: ${CONFIG.EXCHANGE}`);
    console.log(`  - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${CONFIG.SYMBOL}`);
    console.log(`  - –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${CONFIG.FLUSH_EVERY_MS}ms`);
    console.log(`  - –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${CONFIG.DATA_DIR}`);
    console.log('  - –¢–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã:');
    CONFIG.TRADING_SESSIONS.forEach((session, index) => {
      const startTime = `${Math.floor(session.start / 60)}:${String(session.start % 60).padStart(2, '0')}`;
      const endTime = `${Math.floor(session.end / 60)}:${String(session.end % 60).padStart(2, '0')}`;
      console.log(`    –°–µ—Å—Å–∏—è ${index + 1}: ${startTime} - ${endTime}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    const now = new Date();
    const moscowTime = new Date(now.getTime() + (3 * 60 * 60 * 1000));
    console.log(`  - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): ${moscowTime.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`);
    console.log(`  - –¢–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω—ã: ${isTradingTime() ? '–î–ê' : '–ù–ï–¢'}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await ensureDataDirectory();
    
    // –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
    wsClient = new AlorWS();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ
    await wsClient.connect(handleWebSocketMessage);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
    
    isRunning = true;
    console.log('[i] WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...');
    console.log('[i] –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    
  } catch (error) {
    console.error('[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–º–ø–∞:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
 */
async function ensureDataDirectory() {
  try {
    if (!fs.existsSync(CONFIG.DATA_DIR)) {
      fs.mkdirSync(CONFIG.DATA_DIR, { recursive: true });
      console.log(`[i] –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: ${CONFIG.DATA_DIR}`);
    }
  } catch (error) {
    console.error('[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
 */
function saveDataToFile(datBuffer) {
  if (isSaving) {
    throw new Error('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª —É–∂–µ –∏–¥–µ—Ç');
  }

  try {
    isSaving = true;
    const timestamp = new Date();
    const startSavingTime = timestamp.getTime();

    const dateStr = timestamp.toISOString().split('T')[0]; // YYYY-MM-DD
    const fileName = `${CONFIG.SYMBOL}_data_${dateStr}.json`;
    const filePath = path.join(CONFIG.DATA_DIR, fileName);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ - –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    let dataToWrite = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –±—É—Ñ–µ—Ä–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    datBuffer.forEach((item, index) => {
      dataToWrite += item + '\n';
    });
    
    // –ê—Ç–æ–º–∞—Ä–Ω–æ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ —Å callback
    writeFileAtomic(filePath, dataToWrite, {
      encoding: 'utf8',
      mode: 0o644,
      flag: 'a' // –§–ª–∞–≥ –¥–ª—è –¥–æ–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
    }, (err) => {
      if (err) {
        console.error('[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
      } else {
        console.log(`${getLogTimestamp()} [üíæ] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${datBuffer.length} –∑–∞–ø–∏—Å–µ–π –≤ ${fileName}, –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${new Date().getTime() - startSavingTime}ms`);
      }
      datBuffer.length = 0;

      isSaving = false;
    });
    
  } catch (error) {
    console.error('[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    isSaving = false;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
 * @param {Object} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket
 */
function handleWebSocketMessage(message) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã
    if (!isTradingTime()) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    if (!message.data) {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(`[i] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.opcode || 'unknown'}`);
      return;
    }

    const rec = JSON.stringify(message, null, ''); // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫

    if (dataBufferCurrent.length % 100 === 0) {
      console.log(`${getLogTimestamp()} [i] –ë—É—Ñ–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç ${dataBufferCurrent.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    }

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (dataBufferCurrent.length >= MAX_BUFFER_SIZE) {
      console.log(`${getLogTimestamp()} [i] –ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª`);
      let bufferToSave = swapDataBuffers();

      // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
      dataBufferCurrent.push(rec);

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∏ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
      saveDataToFile(bufferToSave);
    }
    else {
      dataBufferCurrent.push(rec);
    }
  } catch (error) {
    console.error('[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

function swapDataBuffers() {
  if (currentIndex === 0) {
    dataBufferCurrent = dataBuffer2;
    currentIndex = 1;

    return dataBuffer1;
  } 
  else if (currentIndex === 1) {
    dataBufferCurrent = dataBuffer1;
    currentIndex = 0;

    return dataBuffer2;
  } 
  else {
    throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±—É—Ñ–µ—Ä–∞');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
 * @param {Object} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
function handleErrorMessage(message) {
  console.error('[!] WebSocket –æ—à–∏–±–∫–∞:', message.message || message);
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
 */
function cleanup() {
  console.log('\n[i] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
  if (dataBufferCurrent.length > 0) {
    console.log('[i] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö...');

    
    saveDataToFile(dataBufferCurrent);
  }
  
  if (wsClient) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (wsClient.ws) {
      wsClient.ws.close(1000, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
    }
  }
  
  isRunning = false;
  console.log('[i] –ú–æ–¥—É–ª—å –¥–∞–º–ø–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
}
